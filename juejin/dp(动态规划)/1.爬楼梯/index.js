// 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
// 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢


const climbStairs = (n) => {
  const dp = [];
  dp[0] = 0;
  dp[1] = 1;
  dp[2] = 2;
  for (let i = 3; i <= n; i++) {
    dp[i] = dp[i - 1] + dp[i - 2]
  }
  return dp[n];
}
/**
 * 核心思路
 * n为1的时候，只需要走一步
 * n为2的时候，需要1+1或者2
 * n为3的时候需要要不就是先走到第1个阶梯再走2，要不就是先走到第2个阶梯再走1
 * n为n的时候，要不就是先走到n-1个阶梯再走1，要不就是先走到n-2个阶梯再走2
 * 所以n为走到n-1的方法加上走到n-2的方法
 */


